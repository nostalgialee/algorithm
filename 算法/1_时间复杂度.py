# -*- coding:utf-8 -*-
# @Time    : 2022/6/1 22:45
# @File    : 1_时间复杂度.py
# Author: lee

'''
时间复杂度
1.用来评估运行效率的一个式子
2.一般来说时间复杂度高的算法要比时间复杂度低的算法慢
3.复杂问题的时间复杂度O(n!) O(2**n) O(n**N)


O(1)
O(logn) 循环折半的问题一定存在 logN
O(n)
O(nlogn)
O(n**2)
O(n**2logn)
O(n**3)

'''

# 折半运算的时间复杂度
def func(n):
    while n>1:
        print(n)
        n = n//2
# 以上的时间复杂度

"""

n = 64 时候
64
32
16
8
4
2

运行了6次，相当于 2**6 == 64
对数运算 log2 64 = 6

O(logn)

"""


# 常规算法快速确定时间复杂度
    # 确定问题规模
    # 循环减半 logn
    # k层关于n的循环 n**k




