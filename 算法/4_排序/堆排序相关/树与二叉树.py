# -*- coding:utf-8 -*-
# @Time    : 2022/6/3 18:17
# @File    : 树与二叉树.py
# Author: lee

# 堆排序
"""
一、基本概念

树是一种数据结构：ex: 目录结构

树是一种可以递归定义的数据结构

树是由n个节点组成的集合
    if n=0, 那这是一颗空树
    if n>0, 那勋在一个节点作为树的根节点，
    其他节点可以分为m个集合，每个集合本身又是一棵树


根节点 / 叶子节点


树的深度

!!!!!!
树的度（一棵树最多分了几个叉，就是多少度）
!!!!!!

孩子节点 / 父节点

子树

"""


"""
二、二叉树：度不超过2的树

    每个节点最多有两个孩子节点

    两个孩子节点被区分为左孩子节点和右孩子节点


    满二叉树：
        1.二叉树
        2.每一层的节点都达到最大值
    
    
    完全二叉树：（简单理解，从满叉树拿走几个节点，）
        1.叶节点只能出现在最下层和次下层
        2.并且最下面的一层的节点都集中在该层最左边的若干位置




    二叉树的存储方式（表示方式）：
        链式存储方式
        
        顺序存储方式
            父亲i与左孩子的下标关系 2i+1
            父亲i与右孩子的下标关系 2i+2


"""

"""
三.堆：是一种特殊的完全二叉树结构
    大根堆：
        一颗完全二叉树，满足任意节点都比孩子节点大
    
    小根堆：
        一颗完全二叉树，满足任意节点都比孩子节点小


    堆的性质：
        向下调整性质：假设节点的左右都是堆，但是自身不是大(小)根堆，
        可以通过一次向下调整将自身变为一个堆
        

"""


"""
四、堆排序
    0.
    1.建立堆
            农村包围城市，从下往上
            最后一个非叶子节点，对这个子树进行调整，将大的子节点与父节点进行比较
            
            
    # (挨个出数字，然后向下调整)
    2.得到堆顶元素，为最大元素
    3.去掉堆顶，将对最后一个元素放到堆顶，此时可以向下调整一次
    4.堆顶元素为第二大元素
    5.重读步骤3，直至堆变空

"""



# 代码实现

